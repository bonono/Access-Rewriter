// Generated by CoffeeScript 1.4.0
(function() {
  var create_data_url_scheme, global, main;

  global = this;

  global.app = {
    is_ready: false,
    setup_failed: false,
    config: null
  };

  main = function() {
    return global.app.config = new global.config(function(success) {
      console.log(this);
      global.app.setup_failed = !success;
      return global.app.is_ready = true;
    });
  };

  create_data_url_scheme = function(rewrite) {
    var data;
    data = "data:" + rewrite.mime_header + "/" + rewrite.mime_body;
    if (rewrite.base64) {
      data += ";base64";
    }
    data += "," + global.app.config.get_data(rewrite.id);
    return data;
  };

  chrome.runtime.onInstalled.addListener(main);

  chrome.runtime.onStartup.addListener(main);

  chrome.webRequest.onBeforeRequest.addListener(function(detail) {
    var rewrite, url_pattern, _i, _len, _ref;
    if (global.app.is_ready && !global.app.setup_failed && !global.app.config.disabled_all()) {
      _ref = global.app.config.get_rewrites();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rewrite = _ref[_i];
        if (!rewrite.disabled) {
          if (rewrite.url_is_regex) {
            url_pattern = new RegExp(rewrite.url);
            if (detail.url.match(url_pattern)) {
              return {
                redirectUrl: create_data_url_scheme(rewrite)
              };
            }
          } else {
            if (detail.url === rewrite.url) {
              return {
                redirectUrl: create_data_url_scheme(rewrite)
              };
            }
          }
        }
      }
      return {
        cancel: false
      };
    } else {
      return {
        cancel: false
      };
    }
  }, {
    urls: ["*://*/*"]
  }, ["blocking"]);

}).call(this);
