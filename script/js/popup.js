// Generated by CoffeeScript 1.4.0
(function() {
  var add_rewrite_item, changed_disabled_all, clicked_status_button, global, ready;

  global = this;

  clicked_status_button = function() {
    var disabled, id, item,
      _this = this;
    if (!$(this).hasClass("selected")) {
      item = $(this.parentNode);
      item.children('.selected').removeClass("selected");
      id = parseInt(this.parentNode.dataset.rewrite);
      disabled = $(this).text() === 'OFF';
      $('#foreground-view h3').text('変更しています');
      return $('#foreground-view').fadeIn(200, function() {
        return global.app.config.disabled(id, disabled, function(success, rewrite) {
          item.children(rewrite.disabled ? ".off" : ".on").addClass("selected");
          return $('#foreground-view').fadeOut(200);
        });
      });
    }
  };

  changed_disabled_all = function() {
    $('#foreground-view h3').text('変更しています');
    return $('#foreground-view').fadeIn(200, function() {
      return global.app.config.set_disabled_all(document.disabled_all.checkbox.checked, function() {
        var disabled_all, hidden_element, shown_element;
        disabled_all = this.disabled_all();
        document.disabled_all.checkbox.checked = disabled_all;
        hidden_element = disabled_all ? "#rewrites" : "#disabled-all-message";
        shown_element = disabled_all ? "#disabled-all-message" : "#rewrites";
        $(hidden_element).hide();
        $(shown_element).show();
        return $('#foreground-view').fadeOut(200);
      });
    });
  };

  add_rewrite_item = function(rewrite) {
    var item, off_button, on_button;
    item = $("<div class=\"rewrite\" data-rewrite=\"" + rewrite.id + "\"></div>");
    item.append("<div class=\"name\">" + rewrite.title + "</div>");
    on_button = $('<div class="button on">ON</div>');
    off_button = $('<div class="button off">OFF</div>');
    (rewrite.disabled ? off_button : on_button).addClass("selected");
    item.append(on_button, off_button);
    $('#rewrites').append(item);
    on_button.click(clicked_status_button);
    return off_button.click(clicked_status_button);
  };

  ready = function() {
    var disabled_all, rewrite, rewrites, _i, _len, _ref;
    if (global.app.setup_failed) {
      return $('#foreground-view h3').text('拡張機能のセットアップに失敗しました');
    } else {
      $('#foreground-view').hide();
      if ((rewrites = global.app.config.get_rewrites()).length !== 0) {
        _ref = global.app.config.get_rewrites();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          rewrite = _ref[_i];
          add_rewrite_item(rewrite);
        }
        disabled_all = global.app.config.disabled_all();
        document.disabled_all.checkbox.checked = disabled_all;
        if (disabled_all) {
          $('#rewrites').hide();
          $('#disabled-all-message').show();
        }
        return $(document.disabled_all.checkbox).change(changed_disabled_all);
      } else {
        $('form').hide();
        return $('#container').append('<p>設定されている書き換え設定はありません<br />オプションページより設定を作成できます</p>');
      }
    }
  };

  $(function() {
    return chrome.runtime.getBackgroundPage(function(bkg) {
      var timer;
      global.app = bkg.app;
      if (global.app.is_ready) {
        return ready();
      } else {
        $('#foreground-view h3').text('拡張機能をロードしています');
        $('#foreground-view').show();
        return timer = setInterval(function() {
          if (global.app.is_ready) {
            clearInterval(timer);
            return ready();
          }
        }, 100);
      }
    });
  });

}).call(this);
